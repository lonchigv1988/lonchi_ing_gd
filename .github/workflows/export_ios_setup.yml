name: Export iOS Setup (Complete)

on:
  workflow_dispatch:

jobs:
  export-ios:
    runs-on: macos-latest

    steps:
      # 1. Checkout your repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.35.6
          architecture: x64

      # 3. Precache Flutter iOS artifacts
      - name: Precache Flutter iOS artifacts
        run: flutter precache --ios

      # 4. Clean project
      - name: Clean Flutter project
        run: |
          flutter clean
          rm -rf ios/Pods ios/Podfile.lock pubspec.lock
          flutter pub cache repair

      # 5. Get Flutter dependencies
      - name: Get Flutter dependencies
        run: flutter pub get

      # 6. Prepare Flutter iOS frameworks locally
      - name: Prepare Flutter iOS frameworks
        run: |
          mkdir -p ios/Flutter
          ENGINE_DIR="$FLUTTER_ROOT/bin/cache/artifacts/engine"

          echo "Copying Flutter frameworks..."
          if [ -d "$ENGINE_DIR/ios-release/Flutter.xcframework" ]; then
            cp -R "$ENGINE_DIR/ios-release/Flutter.xcframework" ios/Flutter/
          elif [ -d "$ENGINE_DIR/ios/Flutter.xcframework" ]; then
            cp -R "$ENGINE_DIR/ios/Flutter.xcframework" ios/Flutter/
          elif [ -d "$ENGINE_DIR/ios/Flutter.framework" ]; then
            cp -R "$ENGINE_DIR/ios/Flutter.framework" ios/Flutter/
          else
            echo "❌ Flutter.xcframework not found!"
            exit 1
          fi

          if [ -d "$ENGINE_DIR/ios/extension_safe/Flutter.xcframework" ]; then
            cp -R "$ENGINE_DIR/ios/extension_safe/Flutter.xcframework" ios/Flutter/Flutter_extension_safe.xcframework
          fi

          if [ -f "$ENGINE_DIR/ios/Flutter.podspec" ]; then
            cp "$ENGINE_DIR/ios/Flutter.podspec" ios/Flutter/
          elif [ -f "$ENGINE_DIR/ios-release/Flutter.podspec" ]; then
            cp "$ENGINE_DIR/ios-release/Flutter.podspec" ios/Flutter/
          fi

          echo "✅ Flutter frameworks prepared under ios/Flutter"

      # 7. Create Podfile (for reproducibility)
      - name: Create Podfile
        run: |
          mkdir -p ios
          cat <<'EOF' > ios/Podfile
          platform :ios, '15.0'

          use_frameworks!
          use_modular_headers!

          ENV['COCOAPODS_DISABLE_STATS'] = 'true'

          flutter_root = ENV['FLUTTER_ROOT']
          require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
          flutter_ios_podfile_setup

          target 'Runner' do
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
          end

          post_install do |installer|
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
                config.build_settings['SWIFT_VERSION'] = '5.0'
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
                config.build_settings['HEADER_SEARCH_PATHS'] ||= '$(inherited)'
                config.build_settings['HEADER_SEARCH_PATHS'] << ' $(PROJECT_DIR)/Flutter'
                config.build_settings['HEADER_SEARCH_PATHS'] << ' $(PROJECT_DIR)/Flutter/Flutter.framework/Headers'
                config.build_settings['HEADER_SEARCH_PATHS'] << ' $(PROJECT_DIR)/Flutter/Flutter.xcframework/ios-arm64/Flutter.framework/Headers'
                config.build_settings['HEADER_SEARCH_PATHS'] << ' $(PROJECT_DIR)/Flutter/Flutter.xcframework/ios-arm64_x86_64-simulator/Flutter.framework/Headers'
                config.build_settings['HEADER_SEARCH_PATHS'] << ' $(FLUTTER_ROOT)/bin/cache/artifacts/engine/ios-release/Flutter.xcframework/ios-arm64/Flutter.framework/Headers'
                config.build_settings['FRAMEWORK_SEARCH_PATHS'] ||= '$(inherited)'
                config.build_settings['FRAMEWORK_SEARCH_PATHS'] << ' $(PROJECT_DIR)/Flutter'
              end
            end
            flutter_post_install(installer) if defined?(flutter_post_install)
          end
          EOF
          echo "✅ Podfile created"

      # 8. Install CocoaPods
      - name: Install CocoaPods
        working-directory: ios
        run: |
          pod repo update
          pod install --repo-update

      # 9. Package both iOS setup and Flutter engine
      - name: Create combined artifact
        run: |
          mkdir -p export_bundle
          cp -R ios export_bundle/ios
          mkdir -p export_bundle/flutter_engine
          cp -R "$FLUTTER_ROOT/bin/cache/artifacts/engine/ios"* export_bundle/flutter_engine/ || true
          zip -r ios_export_bundle.zip export_bundle

      # 10. Upload artifact
      - name: Upload complete iOS setup
        uses: actions/upload-artifact@v4
        with:
          name: ios-complete-setup
          path: ios_export_bundle.zip
